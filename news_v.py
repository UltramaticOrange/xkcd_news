import imghdr
import socket
import logging
import requests
import argparse
from   PIL import Image
from   io import BytesIO
from   flask import Flask
from   news_c import xkcd_news
from   base64 import b64encode
from   functools import lru_cache
from   news_consts import C, log_messages

app = Flask(__name__)

# TODO: news_[mvc]: write a separte function that does all error handling for requests.get() calls

#@lru_cache(maxsize=256)
@lru_cache(maxsize=256)
def image64(url, imgTag=False, maxSize=C.IMG_MAX_SIZE): # 'img' is abbriviated to reflect the html <img /> tag.
  # TODO: image64: proxy config
  response = None
  try:
    response = requests.get(url, verify=False) # TODO: image64: The SSL certs for Debian Jessie haven't been updated since 2014. verify=False is a temporary work-around that shouuld be removed.
    if response and response.status_code != 200:
      raise requests.exceptions.ConnectionError
  except requests.exceptions.ConnectionError as e:
    logging.error(log_messages.E_UNABLE_TO_FETCH%(response.status_code if response else '<timeout>', url))
    return None

  rawImage = response.content # get the image to be manipulated
  imageType = imghdr.what(BytesIO(rawImage)) # returns an empty string if it can't be ID'd as a valid pic type.

  if imageType:
    try:
      imageObj = Image.open(BytesIO(rawImage))
    except IOError as e:
      logging.error(log_messages.E_CORRUPT_IMAGE%url)
      return None
  else:
    logging.error(log_messages.E_UNKNOWN_IMAGE_TYPE%url)
    return None

  # if the image is larger than a 125x125 thumbnail then resize it
  # if the user used 0 or None as the max size, preserve the original size.
  if maxSize and (imageObj.size[0] > maxSize or imageObj.size[1] > maxSize):
    # It seems any errors generated by PIL should happen with open()
    imageObj.thumbnail((maxSize, maxSize), Image.ANTIALIAS)

    fakeFile = BytesIO() # a file-like object to hold the data in memory ... because PIL is an asshole that won't work with strings.
    imageObj.save(fakeFile, imageType.upper())
    fakeFile.seek(0)
    rawImage = fakeFile.read()

  b64image = 'data:image/%s;base64,%s'%(imageType, b64encode(rawImage).decode())
  return '<img src="%s">'%b64image if imgTag else b64image

@app.route('/robots.txt')
def robots():
  return '#Domo arigato, Mr. Roboto!'

@app.route('/favicon.ico')
def favicon():
  try:
    return open('rss.png').read()
  except:
    return None

@app.route('/')
def news():
  try:
    templateFile = open(C.HTML_TEMPLATE)
    htmlTemplate = templateFile.read()
    if not htmlTemplate:
      raise IOError # we want the same logic anyway, so /lazymode powers activated.
  except IOError as e:
    logging.warn(log_messages.W_TEMPLATE_UNAVAILABLE%C.HTML_TEMPALTE)
    htmlTemplate = C.HTML_FALLBACK
  finally:
    templateFile.close()

  html = ''
  news = xkcd_news()
  newsByDate = {}
  for site in news:
    for story in site:
      normalizedDate = story.date.to('America/Los_Angeles') # TODO: news: make date an item in consts so it's configurable-ish.
      body = C.HTML_DIV.format(**{C.CLASS:C.STORY_BODY, C.CONTENT:story.body})
      title = C.HTML_DIV.format(**{C.CLASS:C.STORY_TITLE, C.CONTENT:story.title})
      title = C.HTML_A.format(**{C.CLASS:C.STORY_TITLE, C.URL:story.url, C.CONTENT:title})
      date = C.HTML_PUBLISH_DATE.format(**{C.CLASS:C.STORY_PUBUBLISH_DATE, C.CONTENT:normalizedDate})
      base64Image = image64(story.image) if story.image else ''
      image = C.HTML_IMG.format(**{C.CLASS:C.STORY_IMAGE, C.CONTENT:base64Image}) if base64Image else ''
      htmlStory = C.HTML_DIV.format(**{C.CLASS:C.STORY_WRAPPER, C.CONTENT:title+image+date+body})

      if normalizedDate in newsByDate:
        newsByDate[normalizedDate].append(htmlStory)
      else:
        newsByDate[normalizedDate] = [htmlStory]
  keys = sorted(newsByDate)
  keys.reverse()
  for key in keys:
    html += ''.join(newsByDate[key])

  try:
    finalHTML = htmlTemplate.format(**{C.HTML_BODY:html, C.HTML_TITLE:'Top Headlines, a la XKCD!'})
  except KeyError:
    logging.error(log_messages.E_TEMPLATE_MALFORMED)
    finalHTML = C.HTML_FALLBACK.format(**{C.HTML_BODY:html, C.HTML_TITLE:'Top Headlines, a la XKCD!'})

  return finalHTML
  #htmlTemplate.format(**{C.HTML_BODY:html, C.HTML_TITLE:'your mom is a hoe bag, lulz.'})

def main():
  print(news())

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('-s', '--scr', dest='noDaemon', default=False, action='store_true', help='Output to screen (for debugging)')
  parser.add_argument('-l', '--listen-on', dest='hostIP', default='127.0.0.1', help='The IP on the host the service should listen on (e.g. 192.168.1.100).')
  args = parser.parse_args()

  if args.noDaemon:
    main()
  else:
    app.run(host=args.hostIP, threaded=True)

